/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.elasticsearch.gradle.test.ClusterConfiguration
import org.elasticsearch.gradle.test.ClusterFormationTasks
import org.elasticsearch.gradle.test.NodeInfo

apply plugin: 'elasticsearch.standalone-rest-test'
apply plugin: 'elasticsearch.rest-test'


ClusterConfiguration configOne = new ClusterConfiguration(project)
configOne.distribution = 'oss-zip'
configOne.clusterName = 'one'
configOne.setting('node.name', 'one')
List<NodeInfo> oneNodes = ClusterFormationTasks.setup(project, 'clusterOne', integTestRunner, configOne)

ClusterConfiguration configTwo = new ClusterConfiguration(project)
configTwo.distribution = 'oss-zip'
configTwo.clusterName = 'two'
configTwo.setting('node.name', 'two')
List<NodeInfo> twoNodes = ClusterFormationTasks.setup(project, 'clusterTwo', integTestRunner, configTwo)

integTestCluster {
  // tribe nodes had a bug where if explicit ports was specified for the tribe node, the dynamic socket permissions that were applied
  // would not account for the fact that the internal node client needed to bind to sockets too; thus, we use explicit port ranges to
  // ensure that the code that fixes this bug is exercised
  setting 'http.port', '40200-40249'
  setting 'transport.tcp.port', '40300-40349'
  setting 'node.name', 'quest'
  setting 'tribe.one.cluster.name', 'one'
  setting 'tribe.one.discovery.zen.ping.unicast.hosts', "'${-> oneNodes.get(0).transportUri()}'"
  setting 'tribe.one.http.enabled', 'true'
  setting 'tribe.one.http.port', '40250-40299'
  setting 'tribe.one.transport.tcp.port', '40350-40399'
  setting 'tribe.two.cluster.name', 'two'
  setting 'tribe.two.discovery.zen.ping.unicast.hosts', "'${-> twoNodes.get(0).transportUri()}'"
  setting 'tribe.two.http.enabled', 'true'
  setting 'tribe.two.http.port', '40250-40299'
  setting 'tribe.two.transport.tcp.port', '40250-40399'
  if ('zip'.equals(distribution)) {
    /*
     * The default distribution requires a setting for `on_conflict` when
     * you use tribe.
     */
    setting 'tribe.on_conflict', 'prefer_tribe.one'
  }

  waitCondition = { node, ant ->
    File tmpFile = new File(node.cwd, 'wait.success')
    // 5 nodes: tribe + clusterOne (1 node + tribe internal node) + clusterTwo (1 node + tribe internal node)
    ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=5&wait_for_status=yellow",
            dest: tmpFile.toString(),
            ignoreerrors: true,
            retries: 10)
    return tmpFile.exists()
  }
}
